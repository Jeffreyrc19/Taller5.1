package Matriz2;

import java.awt.GridLayout;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author User
 */
public class Matricial1 extends javax.swing.JFrame {

    
 private double[][] resultadoActual;

 
    public Matricial1() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        btn_ant = new javax.swing.JButton();
        Panel3 = new javax.swing.JPanel();
        Panel4 = new javax.swing.JPanel();
        Panel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        FilaA = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ColumnaA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        FilaB = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        ColumnaB = new javax.swing.JTextField();
        btn_gen = new javax.swing.JButton();
        operar = new javax.swing.JButton();
        btn_c = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Panel1.setBackground(new java.awt.Color(234, 255, 252));
        Panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        getContentPane().add(Panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 420, 250));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Operaciones", "Suma", "Resta", "Multiplicacion", "Escalar", "Inversa", "Transpuesta" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 420, -1));

        btn_ant.setText("Ant");
        btn_ant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_antActionPerformed(evt);
            }
        });
        getContentPane().add(btn_ant, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 70, 90, -1));

        Panel3.setBackground(new java.awt.Color(234, 255, 252));
        Panel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Panel3Layout = new javax.swing.GroupLayout(Panel3);
        Panel3.setLayout(Panel3Layout);
        Panel3Layout.setHorizontalGroup(
            Panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );
        Panel3Layout.setVerticalGroup(
            Panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );

        getContentPane().add(Panel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 420, 210));

        Panel4.setBackground(new java.awt.Color(234, 255, 252));
        Panel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Panel4Layout = new javax.swing.GroupLayout(Panel4);
        Panel4.setLayout(Panel4Layout);
        Panel4Layout.setHorizontalGroup(
            Panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );
        Panel4Layout.setVerticalGroup(
            Panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );

        getContentPane().add(Panel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 350, 410, -1));

        Panel2.setBackground(new java.awt.Color(234, 255, 252));
        Panel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Panel2Layout = new javax.swing.GroupLayout(Panel2);
        Panel2.setLayout(Panel2Layout);
        Panel2Layout.setHorizontalGroup(
            Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );
        Panel2Layout.setVerticalGroup(
            Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        getContentPane().add(Panel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 100, 410, 250));

        jPanel6.setBackground(new java.awt.Color(234, 255, 252));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Fila A");

        FilaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilaAActionPerformed(evt);
            }
        });

        jLabel2.setText("Columa A");

        ColumnaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColumnaAActionPerformed(evt);
            }
        });

        jLabel3.setText("Fila B");

        jLabel4.setText("Columna B");

        ColumnaB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColumnaBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(52, 52, 52)
                        .addComponent(FilaA, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(ColumnaB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(FilaB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addComponent(ColumnaA, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilaA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(ColumnaA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilaB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ColumnaB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel6.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        btn_gen.setText("Gen");
        btn_gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_genActionPerformed(evt);
            }
        });
        jPanel6.add(btn_gen, new org.netbeans.lib.awtextra.AbsoluteConstraints(634, 69, 90, -1));

        operar.setText("Operar");
        operar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operarActionPerformed(evt);
            }
        });
        jPanel6.add(operar, new org.netbeans.lib.awtextra.AbsoluteConstraints(736, 69, 90, -1));

        btn_c.setText("C");
        btn_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cActionPerformed(evt);
            }
        });
        jPanel6.add(btn_c, new org.netbeans.lib.awtextra.AbsoluteConstraints(844, 69, 80, -1));

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 350));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Inicio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jButton1)
                .addContainerGap(1112, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(180, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        getContentPane().add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 1200, 250));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void operarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operarActionPerformed
        // TODO add your handling code here:
        int numFilasA = Integer.parseInt(FilaA.getText());
        int numColumnasA = Integer.parseInt(ColumnaA.getText());
        int numFilasB = Integer.parseInt(FilaB.getText());
        int numColumnasB = Integer.parseInt(ColumnaB.getText());
        double[][] matrizA = new double[numFilasA][numColumnasA];
        double[][] matrizB = new double[numFilasB][numColumnasB];
        for (int i = 0; i < numFilasA; i++) {
            for (int j = 0; j < numColumnasA; j++) {
                JTextField textFieldA = (JTextField) Panel1.getComponent(i*numColumnasA+j);
                matrizA[i][j] = Double.parseDouble(textFieldA.getText());
            }
        }
        for (int i = 0; i < numFilasB; i++) {
            for (int j = 0; j < numColumnasB; j++) {
                JTextField textFieldB = (JTextField) Panel2.getComponent(i*numColumnasB+j);
                matrizB[i][j] = Double.parseDouble(textFieldB.getText());
            }
        }
        String operacion = (String) jComboBox1.getSelectedItem();
        double[][] resultado;
        if (operacion.equals("Suma")) {
            resultado = sumarMatrices(matrizA, matrizB);
        } else if (operacion.equals("Resta")) {
            resultado = restarMatrices(matrizA, matrizB);
        } else if (operacion.equals("Multiplicacion")) {
            resultado = multiplicarMatrices(matrizA, matrizB);
        }  else if (operacion.equals("Inversa")) {
            resultado = obtenerInversa(matrizA);
            imprimirMatriz(obtenerInversa(matrizB), Panel4);
        } else if (operacion.equals("Transpuesta")) {
            resultado = obtenerTranspuesta(matrizA);
            imprimirMatriz(obtenerTranspuesta(matrizB), Panel4);

        } else if (operacion.equals("Escalar")) {
            double escalar = Double.parseDouble(JOptionPane.showInputDialog(null, "Ingrese el escalar a multiplicar:", "Escalar", JOptionPane.PLAIN_MESSAGE));
            resultado = multiplicacionEscalar(matrizA, escalar);
            imprimirMatriz(multiplicacionEscalar(matrizB, escalar), Panel4);
        } else {
            resultado = null; // operación no soportada
        }

        if (resultado != null) {
            GridLayout layoutResultado = new GridLayout(resultado.length, resultado[0].length);
            Panel3.setLayout(layoutResultado);
            Panel3.removeAll(); // Eliminamos cualquier componente existente en el Panel3
            for (int i = 0; i < resultado.length; i++) {
                for (int j = 0; j < resultado[0].length; j++) {
                    JTextField textFieldResultado = new JTextField(Double.toString(resultado[i][j]));
                    Panel3.add(textFieldResultado);
                }
            }
            Panel3.revalidate();
            Panel3.repaint();
        }
        try {
            // Crear el objeto FileWriter para escribir en el archivo "HistorialMatricial.txt"
            FileWriter fileWriter = new FileWriter("HistorialMatricial.txt", true);
            // Crear el objeto PrintWriter para escribir en el archivo
            PrintWriter printWriter = new PrintWriter(fileWriter);
            printWriter.println("Operación: " + operacion);
            // Iterar sobre la matriz de resultado y escribir cada fila en el archivo
            for (int i = 0; i < resultado.length; i++) {
                // Escribir la fila en el archivo
                for (int j = 0; j < resultado[0].length; j++) {
                    // Escribir el elemento en el archivo
                    printWriter.print("[" + resultado[i][j] + "]");
                }
                printWriter.println();
            }
            // Separar las matrices con una línea en blanco
            printWriter.println();
            // Cerrar el objeto PrintWriter y el objeto FileWriter
            printWriter.close();
            fileWriter.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        }

        private double[][] sumarMatrices(double[][] matrizA, double[][] matrizB) {
            double[][] resultado = new double[matrizA.length][matrizA[0].length];
            for (int i = 0; i < matrizA.length; i++) {
                for (int j = 0; j < matrizA[0].length; j++) {
                    resultado[i][j] = matrizA[i][j] + matrizB[i][j];
                    resultadoActual = resultado;
                }

            }
            return resultado;
    }//GEN-LAST:event_operarActionPerformed

    private void btn_antActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_antActionPerformed
        // TODO add your handling code here:
        if (resultadoActual != null) {
            imprimirMatriz(resultadoActual, Panel1);
        } else {
            // Si no hay resultado anterior, imprimir un mensaje o hacer otra acción
        }
    }//GEN-LAST:event_btn_antActionPerformed

    private void btn_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cActionPerformed
        FilaA.setText("");
        ColumnaA.setText("");
        FilaB.setText("");
        ColumnaB.setText("");
        Panel1.removeAll();
        Panel2.removeAll();
        Panel3.removeAll();
        Panel4.removeAll();
        Panel1.revalidate();
        Panel1.repaint();
        Panel2.revalidate();
        Panel2.repaint();
        Panel3.revalidate();
        Panel3.repaint();
        Panel4.revalidate();
        Panel4.repaint();
    }//GEN-LAST:event_btn_cActionPerformed

    private void btn_genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_genActionPerformed
        String filaA = FilaA.getText().trim();
        String columnaA = ColumnaA.getText().trim();
        String filaB = FilaB.getText().trim();
        String columnaB = ColumnaB.getText().trim();

        if (filaA.matches("\\d+") && columnaA.matches("\\d+") && filaB.matches("\\d+") && columnaB.matches("\\d+")) {
            int numFilas = Integer.parseInt(filaA);
            int numColumnas = Integer.parseInt(columnaA);
            int numFilasB = Integer.parseInt(filaB);
            int numColumnasB = Integer.parseInt(columnaB);

            Panel1.removeAll();
            Panel2.removeAll();

            GridLayout layout = new GridLayout(numFilas, numColumnas);
            GridLayout layoutB = new GridLayout(numFilasB, numColumnasB);

            Panel1.setLayout(layout);
            Panel2.setLayout(layoutB);

            for (int i = 0; i < numFilas; i++) {
                for (int j = 0; j < numColumnas; j++) {
                    JTextField textField = new JTextField();
                    Panel1.add(textField);
                }
            }
            for (int i = 0; i < numFilasB; i++) {
                for (int j = 0; j < numColumnasB; j++) {
                    JTextField textField = new JTextField();
                    Panel2.add(textField);
                }
            }

            Panel1.revalidate();
            Panel1.repaint();
            Panel2.revalidate();
            Panel2.repaint();
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar valores numéricos en todas las casillas.");
        }
    }//GEN-LAST:event_btn_genActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                GranMenu gm = new GranMenu();
                 gm.setVisible(true);
                 this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ColumnaBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColumnaBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ColumnaBActionPerformed

    private void ColumnaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColumnaAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ColumnaAActionPerformed

    private void FilaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilaAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilaAActionPerformed
private double[][] restarMatrices(double[][] matrizA, double[][] matrizB) {
    double[][] resultado = new double[matrizA.length][matrizA[0].length];
    for (int i = 0; i < matrizA.length; i++) {
        for (int j = 0; j < matrizA[0].length; j++) {
            resultado[i][j] = matrizA[i][j] - matrizB[i][j];
            resultadoActual = resultado;

        }
    }
    return resultado;
}
private double[][] multiplicarMatrices(double[][] matrizA, double[][] matrizB) {
    int numFilasA = matrizA.length;
    int numColumnasA = matrizA[0].length;
    int numFilasB = matrizB.length;
    int numColumnasB = matrizB[0].length;
    if (numColumnasA != numFilasB) {
        JOptionPane.showMessageDialog(null, "No se pueden multiplicar las matrices. Número de columnas de A distinto al número de filas de B.", "Error", JOptionPane.ERROR_MESSAGE);
        return null;
    }
    double[][] resultado = new double[numFilasA][numColumnasB];
    for (int i = 0; i < numFilasA; i++) {
        for (int j = 0; j < numColumnasB; j++) {
            resultado[i][j] = 0;
            for (int k = 0; k < numColumnasA; k++) {
                resultado[i][j] = matrizA[i][k] * matrizB[k][j];
                resultadoActual = resultado;

            }
        }
    }
    return resultado;
}

private double[][] obtenerInversa(double[][] matriz) {
    int n = matriz.length;
    double[][] matrizAumentada = new double[n][2*n];
    // se construye la matriz aumentada
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrizAumentada[i][j] = matriz[i][j];
        }
        for (int j = n; j < 2*n; j++) {
            matrizAumentada[i][j] = (i == j-n) ? 1 : 0;
        }
    }
    // se realiza la eliminación gaussiana-jordana
    for (int i = 0; i < n; i++) {
        double pivot = matrizAumentada[i][i];
        for (int j = i; j < 2*n; j++) {
            matrizAumentada[i][j] /= pivot;
        }
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = matrizAumentada[k][i];
                for (int j = i; j < 2*n; j++) {
                    matrizAumentada[k][j] -= factor * matrizAumentada[i][j];
                }
            }
        }
    }
    // se extrae la matriz inversa de la matriz aumentada
    double[][] inversa = new double[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            inversa[i][j] = matrizAumentada[i][j+n];
            resultadoActual = inversa;

        }
    }
    return inversa;
}
private void inversaActionPerformed(java.awt.event.ActionEvent evt) {                                       
    int numFilasA = Integer.parseInt(FilaA.getText());
    int numColumnasA = Integer.parseInt(ColumnaA.getText());
    double[][] matrizA = new double[numFilasA][numColumnasA];
    for (int i = 0; i < numFilasA; i++) {
        for (int j = 0; j < numColumnasA; j++) {
            JTextField textFieldA = (JTextField) Panel1.getComponent(i*numColumnasA+j);
            matrizA[i][j] = Double.parseDouble(textFieldA.getText());
        }
    }
    double[][] resultado = obtenerInversa(matrizA);
    imprimirMatriz(resultado, Panel4);
}

private double[][] obtenerTranspuesta(double[][] matriz) {
    int filas = matriz.length;
    int columnas = matriz[0].length;

    double[][] transpuesta = new double[columnas][filas];

    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            transpuesta[j][i] = matriz[i][j];
            resultadoActual = transpuesta;

        }
    }

    return transpuesta;
}

private double[][] multiplicacionEscalar(double[][] matrizA, double escalar) {
    int filasA = matrizA.length;
    int columnasA = matrizA[0].length;

    double[][] resultado = new double[filasA][columnasA];

    for (int i = 0; i < filasA; i++) {
        for (int j = 0; j < columnasA; j++) {
            resultado[i][j] = matrizA[i][j] * escalar;
            resultadoActual = resultado;

        }
    }
    return resultado;
}

private boolean matrizImpresa = false;

private void imprimirMatriz(double[][] matriz, JPanel panel) {
    int filas = matriz.length;
    int columnas = matriz[0].length;
    GridLayout layoutResultado = new GridLayout(filas, columnas);
    panel.setLayout(layoutResultado);
    if (matrizImpresa) {
        panel.removeAll(); // Eliminamos cualquier componente existente en el panel
    }
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            JTextField textFieldResultado = new JTextField(Double.toString(matriz[i][j]));
            panel.add(textFieldResultado);
        }
    }
    panel.revalidate();
    panel.repaint();
    matrizImpresa = true;
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Matricial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Matricial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Matricial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Matricial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Matricial1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ColumnaA;
    private javax.swing.JTextField ColumnaB;
    private javax.swing.JTextField FilaA;
    private javax.swing.JTextField FilaB;
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Panel2;
    private javax.swing.JPanel Panel3;
    private javax.swing.JPanel Panel4;
    private javax.swing.JButton btn_ant;
    private javax.swing.JButton btn_c;
    private javax.swing.JButton btn_gen;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton operar;
    // End of variables declaration//GEN-END:variables
}
